<!DOCTYPE html>
<html>
	<head>

		<title>bPhone</title>

		<script type="text/javascript" src="javascripts/jquery-3.1.0.min.js"></script>
		<script type="text/javascript" src="javascripts/socket.io-1.4.5.js"></script>

		<style type="text/css">

			* {
				font-family: monospace;
			}

			#buy
			{
				float: left;
			}

			.newMessage
			{
				background-color: yellow;
			}

			.loading
			{
				color: lightgrey;
			}

			.number:hover
			{
				text-decoration: underline;
				cursor: pointer;
				cursor: hand;
			}

			.inline
			{
				display: inline;
			}

		</style>

	</head>

	<body>

		<div id="alert">
			<p id="description" class="inline">Alert:</p>
			<p id="notification" class="inline">If anything goes wrong, it will displayed hear.</p>
		</div>

		<div id="newNumber">
			<p>Buy a new number:</p>
			<select id="countries" class="inline"></select>
			<button id="buy" class="inline">Buy</button>
		</div>

		<div id="noNumbers">
			<p>No number.</p>
		</div>

		<div id="numbers" style="display: none;">
			<p>Numbers:</p>
			<ul></ul>
		</div>

		<div id="messages" style="display: none;">
			<p>Messages:</p>
			<ul></ul>
		</div>

		<div id="message" style="display: none;">
			<p class="inline">Message:</p>

			<input id="m" autocomplete="off" />
			<input id="to" autocomplete="off" style="display: none;"/>
			<input id="from" autocomplete="off" style="display: none;"/>

			<button id="button" value="">Send</button>
		</div>

	</body>

</html>

<script>

	//
	//	Connect to the socket server and create a Socket.IO object
	//
	var socket = io();

//////	  ____  _   _
//////	 / __ \| \ | |
//////	| |  | |  \| |
//////	| |  | | . ` |
//////	| |__| | |\  |
//////	 \____/|_| \_|
//////

	//
	//	Display a banner with possible various messages from the back-end
	//	The majority will be errors.
	//
	socket.on('alert', function(msg) {

		$('#notification').text(msg);

	});

	//
	//	When the app receives a new message we highlight the number that
	//	sent us the message.
	//
	socket.on('newMessage', function(obj) {

		//
		//	Go over all the numbers and look for the one that got the new
		//	message.
		//
		$("#numbers > ul").children().each(function() {

			//
			//	Select one of our numbers that received the message.
			//
			if($(this).attr('id') == obj.to.slice(1))
			{
				//
				//	Use this variable to see if we did found a number or not.
				//	If not it means the someone new sent us a message, and we
				//	have to add this number to the list.
				//
				var exists = false;

				//
				//	Loop over each LI to find the right one
				//
				$(this).children().children().each(function() {

					//
					//	Once we have the desired LI, we change the background
					//	color.
					//
					if($(this).text() == obj.from)
					{
						//
						//	If we got a match, the no need to add the number
						//
						exists = true;

						//
						//	Sett the yellow class to show in the UI which
						//	number got the new message.
						//
						$(this).addClass("newMessage");
					}

				});

				//
				//	If the number doesn't exist, add it to the list and
				//	highlight it.
				//
				if(!exists)
				{
					$("#"+ obj.to.slice(1) + " > ul")
					.append($('<li>')
						.attr('class', 'number')
						.text(obj.from).addClass("newMessage"))
				}
			}

		});

	});

	//
	//	Displaying all numbers in our account.
	//
	socket.on('number', function(msg) {

		$("#noNumbers").remove();
		$("#numbers").show();

		$('#numbers > ul')
		.append(
			$('<li>')
			.attr('id', msg.nr.slice(1)) // remove the + char.
			.text(msg.nr + " [" + msg.capabilities + "] ") // Display the number
			.append(
				$('<button>')
				.text('delete')
				.attr('class', 'delete')
				.attr('value', msg.sid) // add the SID number because twill deletes numbers based on this value, and not the number it self.
				)
			.append(
				$('<ul>')
				.append(
					$('<li>')
					.append(
						$('<input>'))
					.append(
						$('<button>')
						.text('new message to')
						.attr('class', 'btnNewMessage')
						)
					)
				)
			)

	});

	//
	//	Display all the phone numbers that interacted with our numbers.
	//
	socket.on('fromNumber', function(msg) {

		$("#"+ msg.to.slice(1) + " > ul")
		.append($('<li>')
			.attr('class', 'number')
			.text(msg.from))

	});

	//
	//	Create an array that will be used to store all the messages
	//	for a specific conversation.
	//
	var db = [];

	//
	//	The server sends to the front-end one message at the time. Each time
	//	this happens we react to it.
	//
	socket.on('message', function(msg) {

		//
		//	Only update the messages view if it is active. Meaning someone
		//	clicked on a number and the conversation is being displayed.
		//
		if($('#messages > ul > li').length > 0 || msg.origin == 'click')
		{
			//
			//	Add the message on the page as it comes no mater the order/
			//
			$('#messages > ul').append($('<li>').text(msg.date + ": " + msg.body));

			//
			//	Push the message that we got a array, which will be used for
			//	storing all the messages.
			//
			db.push(msg)

			//
			//	Sort the array based on the date
			//
			db.sort(function(a, b) {

				if (a.date > b.date)
				{
					return 1;
				}

				if (a.date < b.date)
				{
					return -1;
				}

				//
				//	a must be equal to b
				//
				return 0;

			});

			//
			//	Once the array is sorted, we go over the LI list, and replace
			//	the content of the LI with the new ordered messages.
			//
			//	With this solution we can reorder the messages as they come. No
			//	matter how the server sends them to us.
			//
			$('#messages > ul > li').each(function(index) {

				var date = new Date(db[index].date);

				var month = date.getMonth();
				var day = date.getDay();
				var year = date.getFullYear();
				var hour = date.getHours();
				var minute = date.getMinutes();
				var secconds = date.getSeconds();

				var formatedDate = pad(month, 2) + "-" +
								   pad(day, 2) + "-" +
								   year + " " +
								   pad(hour, 2) + ":" +
								   pad(minute, 2) + ":" +
								   pad(secconds, 2);

				$(this).text(formatedDate + " ░ " + db[index].body);

			});

			//
			//	Remove the loading class
			//
			$(".loading").removeClass("loading");
		}

	});

	//
	//	After buying a number we update the interface with that bought number
	//
	socket.on('bought', function(msg) {

		$('#numbers > ul')
		.append(
			$('<li>')
			.text(msg.nr)
			.append(
				$('<button>')
				.text('delete')
				.attr('class', 'delete')
				.attr('value', msg.sid)
				)
			.append(
				$('<ul>')
				.append(
					$('<li>')
					.append(
						$('<input>'))
					.append(
						$('<button>')
						.text('new message to')
						)
					)
				)
			)

	});

//////	  _____ _      _____ _____ _  __
//////	 / ____| |    |_   _/ ____| |/ /
//////	| |    | |      | || |    | ' /
//////	| |    | |      | || |    |  <
//////	| |____| |____ _| || |____| . \
//////	 \_____|______|_____\_____|_|\_\

	//
	//	Send a text message to the selected number
	//
	$('#button').on("click", function() {

		var to = $('#to').val();
		var from = $('#from').val();
		var message = $('#m').val();

		var obj = {
			to: to,
			from: from,
			message: message
		};

		socket.emit('sendMessage', obj);

		$('#m').val('');

	});

	//
	//	React when we want to start a new conversation with a new number
	//	that we never spoke to.
	//
	$('#numbers').on("click", ".btnNewMessage", function() {

		var nr = $(this).prev().val()

		$(this)
		.parent()
		.parent()
		.append(
			$('<li>')
			.text(nr)
			.attr('class', 'number')
			)

	});

	//
	//	Delete the selected number
	//
	$('#numbers').on("click", '.delete', function() {

		//
		//	Ask the user if it's sure about the deletion, since it might lose
		//	all the messages.
		//
		if(confirm("Are you sure?!") == true)
		{
			var nrElement = $(this);
			var sid = $(this).attr('value');

			socket.emit('delete', sid, function() {

				nrElement.parent().remove();

			});
		}

	});

	//
	//	When we click on a number, we are going to ask Twilio for the whole
	//	conversation for that number.
	//
	$('#numbers').on("click", '.number', function() {

		if($(this).hasClass("loading"))
		{
			return;
		}

		//
		//	Once we selected a number, we can display the message box
		//
		$("#message").show();
		$("#messages").show();

		$(this).removeClass("newMessage");
		$(this).addClass("loading");

		db = [];

		var to = $(this).text();
		var from = $(this).parent()
						  .parent()
						  .clone()    	//clone the element
						  .children() 	//select all the children
						  .remove()   	//remove all the children
						  .end()  		//again go back to selected element
						  .text()

		$('#to').val(to);
		$('#from').val(from);
		$('#messages > ul').empty();

		var obj = {
			to: to,
			from: from
		}

		//
		//	Ask the back-end for all the messages.
		//
		socket.emit('messages', obj);

	});

	//
	//	React to buy click button
	//
	$("#buy").on("click", function() {

		//
		//	Before buying a phone ask the user if he or she are sure, since this
		//	action costs money.
		//
		if(confirm("Do you want to buy a new number?!") == true)
		{
			//
			//	Get selected country
			//
			var country = $("#countries").val();

			//
			//	Ask the back-end to buy a new number from the selected country
			//
			socket.emit('buy', country);
		}

	});

//////	 _    _ ______ _      _____  ______ _____   _____
//////	| |  | |  ____| |    |  __ \|  ____|  __ \ / ____|
//////	| |__| | |__  | |    | |__) | |__  | |__) | (___
//////	|  __  |  __| | |    |  ___/|  __| |  _  / \___ \
//////	| |  | | |____| |____| |    | |____| | \ \ ____) |
//////	|_|  |_|______|______|_|    |______|_|  \_\_____/
//////

	//
	//	DB of countries
	//
	var countries = {
		AF: "Afghanistan",
		AX: "Åland Islands",
		AL: "Albania",
		DZ: "Algeria",
		AS: "American Samoa",
		AD: "Andorra",
		AO: "Angola",
		AI: "Anguilla",
		AQ: "Antarctica",
		AG: "Antigua and Barbuda",
		AR: "Argentina",
		AM: "Armenia",
		AW: "Aruba",
		AU: "Australia",
		AT: "Austria",
		AZ: "Azerbaijan",
		BS: "Bahamas",
		BH: "Bahrain",
		BD: "Bangladesh",
		BB: "Barbados",
		BY: "Belarus",
		BE: "Belgium",
		BZ: "Belize",
		BJ: "Benin",
		BM: "Bermuda",
		BT: "Bhutan",
		BO: "Bolivia, Plurinational State of",
		BQ: "Bonaire, Sint Eustatius and Saba",
		BA: "Bosnia and Herzegovina",
		BW: "Botswana",
		BV: "Bouvet Island",
		BR: "Brazil",
		IO: "British Indian Ocean Territory",
		BN: "Brunei Darussalam",
		BG: "Bulgaria",
		BF: "Burkina Faso",
		BI: "Burundi",
		KH: "Cambodia",
		CM: "Cameroon",
		CA: "Canada",
		CV: "Cape Verde",
		KY: "Cayman Islands",
		CF: "Central African Republic",
		TD: "Chad",
		CL: "Chile",
		CN: "China",
		CX: "Christmas Island",
		CC: "Cocos (Keeling) Islands",
		CO: "Colombia",
		KM: "Comoros",
		CG: "Congo",
		CD: "Congo, the Democratic Republic of the",
		CK: "Cook Islands",
		CR: "Costa Rica",
		CI: "Côte d'Ivoire",
		HR: "Croatia",
		CU: "Cuba",
		CW: "Curaçao",
		CY: "Cyprus",
		CZ: "Czech Republic",
		DK: "Denmark",
		DJ: "Djibouti",
		DM: "Dominica",
		DO: "Dominican Republic",
		EC: "Ecuador",
		EG: "Egypt",
		SV: "El Salvador",
		GQ: "Equatorial Guinea",
		ER: "Eritrea",
		EE: "Estonia",
		ET: "Ethiopia",
		FK: "Falkland Islands (Malvinas)",
		FO: "Faroe Islands",
		FJ: "Fiji",
		FI: "Finland",
		FR: "France",
		GF: "French Guiana",
		PF: "French Polynesia",
		TF: "French Southern Territories",
		GA: "Gabon",
		GM: "Gambia",
		GE: "Georgia",
		DE: "Germany",
		GH: "Ghana",
		GI: "Gibraltar",
		GR: "Greece",
		GL: "Greenland",
		GD: "Grenada",
		GP: "Guadeloupe",
		GU: "Guam",
		GT: "Guatemala",
		GG: "Guernsey",
		GN: "Guinea",
		GW: "Guinea-Bissau",
		GY: "Guyana",
		HT: "Haiti",
		HM: "Heard Island and McDonald Mcdonald Islands",
		VA: "Holy See (Vatican City State)",
		HN: "Honduras",
		HK: "Hong Kong",
		HU: "Hungary",
		IS: "Iceland",
		IN: "India",
		ID: "Indonesia",
		IR: "Iran, Islamic Republic of",
		IQ: "Iraq",
		IE: "Ireland",
		IM: "Isle of Man",
		IL: "Israel",
		IT: "Italy",
		JM: "Jamaica",
		JP: "Japan",
		JE: "Jersey",
		JO: "Jordan",
		KZ: "Kazakhstan",
		KE: "Kenya",
		KI: "Kiribati",
		KP: "Korea, Democratic People's Republic of",
		KR: "Korea, Republic of",
		KW: "Kuwait",
		KG: "Kyrgyzstan",
		LA: "Lao People's Democratic Republic",
		LV: "Latvia",
		LB: "Lebanon",
		LS: "Lesotho",
		LR: "Liberia",
		LY: "Libya",
		LI: "Liechtenstein",
		LT: "Lithuania",
		LU: "Luxembourg",
		MO: "Macao",
		MK: "Macedonia, the Former Yugoslav Republic of",
		MG: "Madagascar",
		MW: "Malawi",
		MY: "Malaysia",
		MV: "Maldives",
		ML: "Mali",
		MT: "Malta",
		MH: "Marshall Islands",
		MQ: "Martinique",
		MR: "Mauritania",
		MU: "Mauritius",
		YT: "Mayotte",
		MX: "Mexico",
		FM: "Micronesia, Federated States of",
		MD: "Moldova, Republic of",
		MC: "Monaco",
		MN: "Mongolia",
		ME: "Montenegro",
		MS: "Montserrat",
		MA: "Morocco",
		MZ: "Mozambique",
		MM: "Myanmar",
		NA: "Namibia",
		NR: "Nauru",
		NP: "Nepal",
		NL: "Netherlands",
		NC: "New Caledonia",
		NZ: "New Zealand",
		NI: "Nicaragua",
		NE: "Niger",
		NG: "Nigeria",
		NU: "Niue",
		NF: "Norfolk Island",
		MP: "Northern Mariana Islands",
		NO: "Norway",
		OM: "Oman",
		PK: "Pakistan",
		PW: "Palau",
		PS: "Palestine, State of",
		PA: "Panama",
		PG: "Papua New Guinea",
		PY: "Paraguay",
		PE: "Peru",
		PH: "Philippines",
		PN: "Pitcairn",
		PL: "Poland",
		PT: "Portugal",
		PR: "Puerto Rico",
		QA: "Qatar",
		RE: "Réunion",
		RO: "Romania",
		RU: "Russian Federation",
		RW: "Rwanda",
		BL: "Saint Barthélemy",
		SH: "Saint Helena, Ascension and Tristan da Cunha",
		KN: "Saint Kitts and Nevis",
		LC: "Saint Lucia",
		MF: "Saint Martin (French part)",
		PM: "Saint Pierre and Miquelon",
		VC: "Saint Vincent and the Grenadines",
		WS: "Samoa",
		SM: "San Marino",
		ST: "Sao Tome and Principe",
		SA: "Saudi Arabia",
		SN: "Senegal",
		RS: "Serbia",
		SC: "Seychelles",
		SL: "Sierra Leone",
		SG: "Singapore",
		SX: "Sint Maarten (Dutch part)",
		SK: "Slovakia",
		SI: "Slovenia",
		SB: "Solomon Islands",
		SO: "Somalia",
		ZA: "South Africa",
		GS: "South Georgia and the South Sandwich Islands",
		SS: "South Sudan",
		ES: "Spain",
		LK: "Sri Lanka",
		SD: "Sudan",
		SR: "Suriname",
		SJ: "Svalbard and Jan Mayen",
		SZ: "Swaziland",
		SE: "Sweden",
		CH: "Switzerland",
		SY: "Syrian Arab Republic",
		TW: "Taiwan, Province of China",
		TJ: "Tajikistan",
		TZ: "Tanzania, United Republic of",
		TH: "Thailand",
		TL: "Timor-Leste",
		TG: "Togo",
		TK: "Tokelau",
		TO: "Tonga",
		TT: "Trinidad and Tobago",
		TN: "Tunisia",
		TR: "Turkey",
		TM: "Turkmenistan",
		TC: "Turks and Caicos Islands",
		TV: "Tuvalu",
		UG: "Uganda",
		UA: "Ukraine",
		AE: "United Arab Emirates",
		GB: "United Kingdom",
		US: "United States",
		UM: "United States Minor Outlying Islands",
		UY: "Uruguay",
		UZ: "Uzbekistan",
		VU: "Vanuatu",
		VE: "Venezuela, Bolivarian Republic of",
		VN: "Viet Nam",
		VG: "Virgin Islands, British",
		VI: "Virgin Islands, U.S.",
		WF: "Wallis and Futuna",
		EH: "Western Sahara",
		YE: "Yemen",
		ZM: "Zambia",
		ZW: "Zimbabwe"
	};

	//
	//	Populate the drop down with all the countries
	//
	for(var key in countries)
	{
		$('#countries')
		.append($('<option>')
			.attr("value", key)
			.text(countries[key]))
	}

	function pad(str, max)
	{
		return str.toString().length < max ? pad("0" + str, max) : str;
	}

</script>